{"version":3,"file":"resolution.js","sources":["../../src/plugins/resolution/utils.js","../../src/plugins/resolution/index.js"],"sourcesContent":["/**\n * @summary Returns deep equality between objects\n * {@link https://gist.github.com/egardner/efd34f270cc33db67c0246e837689cb9}\n * @param obj1\n * @param obj2\n * @return {boolean}\n * @private\n */\nexport function deepEqual(obj1, obj2) {\n  if (obj1 === obj2) {\n    return true;\n  }\n  else if (isObject(obj1) && isObject(obj2)) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false;\n    }\n    for (const prop of Object.keys(obj1)) {\n      if (!deepEqual(obj1[prop], obj2[prop])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n\nfunction isObject(obj) {\n  return typeof obj === 'object' && obj != null;\n}\n","import { AbstractPlugin, CONSTANTS, DEFAULTS, PSVError } from 'photo-sphere-viewer';\nimport SettingsPlugin from 'photo-sphere-viewer/dist/plugins/settings';\nimport { deepEqual } from './utils';\n\n\nDEFAULTS.lang.resolution = 'Quality';\n\n\n/**\n * @typedef {Object} PSV.plugins.ResolutionPlugin.Resolution\n * @property {string} id\n * @property {string} label\n * @property {string|string[]|PSV.Cubemap} panorama\n */\n\n/**\n * @typedef {Object} PSV.plugins.ResolutionPlugin.Options\n * @property {PSV.plugins.ResolutionPlugin.Resolution[]} resolutions - list of available resolutions\n */\n\n/**\n * @summary Adds a setting to choose between multiple resolutions of the panorama.\n * @extends PSV.plugins.AbstractPlugin\n * @memberof PSV.plugins\n */\nexport default class ResolutionPlugin extends AbstractPlugin {\n\n  static id = 'resolution';\n\n  /**\n   * @summary Available events\n   * @enum {string}\n   * @memberof PSV.plugins.ResolutionPlugin\n   * @constant\n   */\n  static EVENTS = {\n    /**\n     * @event resolution-changed\n     * @memberof PSV.plugins.ResolutionPlugin\n     * @summary Triggered when the resolution is changed\n     * @param {string} resolutionId\n     */\n    RESOLUTION_CHANGED: 'resolution-changed',\n  };\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.plugins.ResolutionPlugin.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin}\n     * @readonly\n     * @private\n     */\n    this.settings = SettingsPlugin ? psv.getPlugin(SettingsPlugin) : null;\n\n    if (!this.settings) {\n      throw new PSVError('Resolution plugin requires the Settings plugin');\n    }\n\n    this.settings.addSetting({\n      id     : ResolutionPlugin.id,\n      type   : 'options',\n      label  : this.psv.config.lang.resolution,\n      current: () => (this.prop.resolution ? this.resolutionsById[this.prop.resolution].label : ''),\n      options: () => this.__getSettingsOptions(),\n      apply  : resolution => this.setResolution(resolution),\n    });\n\n    /**\n     * @summary Available resolutions\n     * @member {PSV.plugins.ResolutionPlugin.Resolution[]}\n     */\n    this.resolutions = [];\n\n    /**\n     * @summary Available resolutions\n     * @member {Object.<string, PSV.plugins.ResolutionPlugin.Resolution>}\n     * @private\n     */\n    this.resolutionsById = {};\n\n    /**\n     * @type {Object}\n     * @property {string} resolution - Current resolution\n     * @private\n     */\n    this.prop = {\n      resolution: null,\n    };\n\n    this.psv.on(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n\n    if (options?.resolutions) {\n      this.setResolutions(options.resolutions);\n    }\n  }\n\n  /**\n   * @package\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n\n    this.settings.removeSetting(SettingsPlugin.id);\n\n    super.destroy();\n  }\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  handleEvent(e) {\n    if (e.type === CONSTANTS.EVENTS.PANORAMA_LOADED) {\n      this.__refreshResolution();\n    }\n  }\n\n  /**\n   * @summary Changes the available resolutions\n   * @param {PSV.plugins.ResolutionPlugin.Resolution[]} resolutions\n   */\n  setResolutions(resolutions) {\n    this.resolutions = resolutions;\n    this.resolutionsById = {};\n\n    resolutions.forEach((resolution) => {\n      if (!resolution.id) {\n        throw new PSVError('Missing resolution id');\n      }\n      this.resolutionsById[resolution.id] = resolution;\n    });\n\n    this.__refreshResolution();\n  }\n\n  /**\n   * @summary Changes the current resolution\n   * @param {string} id\n   */\n  setResolution(id) {\n    if (!this.resolutionsById[id]) {\n      throw new PSVError(`Resolution ${id} unknown`);\n    }\n\n    return this.psv.setPanorama(this.resolutionsById[id].panorama, { transition: false, showLoader: false });\n  }\n\n  /**\n   * @summary Returns the current resolution\n   * @return {string}\n   */\n  getResolution() {\n    return this.prop.resolution;\n  }\n\n  /**\n   * @summary Updates current resolution on panorama load\n   * @private\n   */\n  __refreshResolution() {\n    const resolution = this.resolutions.find(r => deepEqual(this.psv.config.panorama, r.panorama));\n    if (this.prop.resolution !== resolution?.id) {\n      this.prop.resolution = resolution?.id;\n      this.trigger(ResolutionPlugin.EVENTS.RESOLUTION_CHANGED, this.prop.resolution);\n    }\n  }\n\n  /**\n   * @summary Returns options for Settings plugin\n   * @return {PSV.plugins.SettingsPlugin.Option[]}\n   * @private\n   */\n  __getSettingsOptions() {\n    return this.resolutions\n      .map(resolution => ({\n        type  : 'button',\n        id    : resolution.id,\n        active: resolution.id === this.prop.resolution,\n        label : resolution.label,\n      }));\n  }\n\n}\n"],"names":["deepEqual","obj1","obj2","isObject","Object","keys","length","prop","obj","DEFAULTS","lang","resolution","ResolutionPlugin","psv","options","settings","SettingsPlugin","getPlugin","PSVError","addSetting","id","type","label","config","current","resolutionsById","__getSettingsOptions","apply","setResolution","resolutions","on","CONSTANTS","EVENTS","PANORAMA_LOADED","setResolutions","destroy","off","removeSetting","handleEvent","e","__refreshResolution","forEach","setPanorama","panorama","transition","showLoader","getResolution","find","r","trigger","RESOLUTION_CHANGED","map","active","AbstractPlugin"],"mappings":"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"}